<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project source="3.4.1" version="1.0">
  This file is intended to be loaded by Logisim-evolution (https://github.com/reds-heig/logisim-evolution).

  <lib desc="#Wiring" name="0">
    <tool name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool name="Probe">
      <a name="appearance" val="NewPins"/>
    </tool>
  </lib>
  <lib desc="#Gates" name="1">
    <tool name="PLA">
      <a name="table" val=""/>
    </tool>
  </lib>
  <lib desc="#Plexers" name="2">
    <tool name="Multiplexer">
      <a name="enable" val="false"/>
    </tool>
    <tool name="Demultiplexer">
      <a name="enable" val="false"/>
    </tool>
  </lib>
  <lib desc="#Arithmetic" name="3"/>
  <lib desc="#Memory" name="4">
    <tool name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="T Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="J-K Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="S-R Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Counter">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Shift Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="Random">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="RAM">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool name="ROM">
      <a name="appearance" val="logisim_evolution"/>
      <a name="contents">addr/data: 8 8
0
</a>
    </tool>
  </lib>
  <lib desc="#I/O" name="5"/>
  <lib desc="#TTL" name="6"/>
  <lib desc="#TCL" name="7">
    <tool name="TclGeneric">
      <a name="content">library ieee;&#13;
use ieee.std_logic_1164.all;&#13;
&#13;
entity TCL_Generic is&#13;
  port(&#13;
    --Insert input ports below&#13;
    horloge_i  : in  std_logic;                    -- input bit example&#13;
    val_i      : in  std_logic_vector(3 downto 0); -- input vector example&#13;
&#13;
	  --Insert output ports below&#13;
    max_o      : out std_logic;                    -- output bit example&#13;
    cpt_o      : out std_logic_Vector(3 downto 0)  -- output vector example&#13;
  );&#13;
end TCL_Generic;&#13;
</a>
    </tool>
  </lib>
  <lib desc="#Base" name="8">
    <tool name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
  </lib>
  <lib desc="#BFH-Praktika" name="9"/>
  <lib desc="#Input/Output-Extra" name="10"/>
  <lib desc="#Soc" name="11">
    <tool name="Rv32im">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="Nios2">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocBus">
      <a name="SocBusIdentifier" val="0x00000189234DB9845bc0fc86"/>
    </tool>
    <tool name="Socmem">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocPio">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocVga">
      <a name="SocBusSelection" val=""/>
    </tool>
    <tool name="SocJtagUart">
      <a name="SocBusSelection" val=""/>
    </tool>
  </lib>
  <main name="main"/>
  <options>
    <a name="gateUndefined" val="ignore"/>
    <a name="simlimit" val="1000"/>
    <a name="simrand" val="0"/>
  </options>
  <mappings>
    <tool lib="8" map="Button2" name="Menu Tool"/>
    <tool lib="8" map="Button3" name="Menu Tool"/>
    <tool lib="8" map="Ctrl Button1" name="Menu Tool"/>
  </mappings>
  <toolbar>
    <tool lib="8" name="Poke Tool"/>
    <tool lib="8" name="Edit Tool"/>
    <tool lib="8" name="Wiring Tool"/>
    <tool lib="8" name="Text Tool">
      <a name="font" val="SansSerif plain 12"/>
      <a name="halign" val="center"/>
      <a name="text" val=""/>
      <a name="valign" val="base"/>
    </tool>
    <sep/>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
    </tool>
    <tool lib="0" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="output" val="true"/>
    </tool>
    <sep/>
    <tool lib="1" name="NOT Gate"/>
    <tool lib="1" name="AND Gate"/>
    <tool lib="1" name="OR Gate"/>
    <tool lib="1" name="XOR Gate"/>
    <tool lib="1" name="NAND Gate"/>
    <tool lib="1" name="NOR Gate"/>
    <sep/>
    <tool lib="4" name="D Flip-Flop">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
    <tool lib="4" name="Register">
      <a name="appearance" val="logisim_evolution"/>
    </tool>
  </toolbar>
  <circuit name="main">
    <a name="appearance" val="logisim_evolution"/>
    <a name="circuit" val="main"/>
    <a name="circuitnamedboxfixedsize" val="true"/>
    <a name="circuitvhdlpath" val=""/>
    <a name="clabel" val=""/>
    <a name="clabelfont" val="SansSerif bold 16"/>
    <a name="clabelup" val="east"/>
    <comp lib="0" loc="(140,260)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="mode"/>
    </comp>
    <comp lib="0" loc="(140,290)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="size"/>
      <a name="width" val="2"/>
    </comp>
    <comp lib="0" loc="(150,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="A"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(150,230)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="label" val="B"/>
      <a name="radix" val="16"/>
      <a name="width" val="32"/>
    </comp>
    <comp lib="0" loc="(650,200)" name="Pin">
      <a name="appearance" val="NewPins"/>
      <a name="facing" val="west"/>
      <a name="label" val="resultado"/>
      <a name="output" val="true"/>
      <a name="radix" val="16"/>
      <a name="tristate" val="true"/>
      <a name="width" val="32"/>
    </comp>
    <comp loc="(530,200)" name="somador_vetorial">
      <a name="appearance" val="logisim_evolution"/>
      <a name="label" val="somador"/>
    </comp>
    <wire from="(140,260)" to="(170,260)"/>
    <wire from="(140,290)" to="(180,290)"/>
    <wire from="(150,200)" to="(310,200)"/>
    <wire from="(150,230)" to="(170,230)"/>
    <wire from="(170,220)" to="(170,230)"/>
    <wire from="(170,220)" to="(310,220)"/>
    <wire from="(170,240)" to="(170,260)"/>
    <wire from="(170,240)" to="(310,240)"/>
    <wire from="(180,260)" to="(180,290)"/>
    <wire from="(180,260)" to="(310,260)"/>
    <wire from="(530,200)" to="(650,200)"/>
  </circuit>
  <vhdl name="somador_vetorial">LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.numeric_std.all;

entity somador_vetorial is
	port(
		A_i, B_i  : in std_logic_vector(31 downto 0);
		mode_i	 : in std_logic;
		vecSize_i : in std_logic_vector(1 downto 0);
		S_o		 : out std_logic_vector(31 downto 0)
	);
end somador_vetorial;

architecture Behavioral of somador_vetorial is

	component CLA_4 is
		port(
			X : in std_logic_vector(3 downto 0);
			y : in std_logic_vector(3 downto 0);
			ci : in std_logic;
			co : out std_logic;
			z : out std_logic_vector(3 downto 0)
		);
	end component CLA_4;
	
	signal B, saida8, saida4, saida2, saida1 : std_logic_vector(31 downto 0) := (others =&gt; '0');
	signal carrys : std_logic_vector(8 downto 0) := (others =&gt; '0'); -- sinal auxiliar 7 downto 0 = carrys, e carrys(0) sempre depende de mode_i
	
	begin
	
	-- carry (0) = 1 se mode_i = 0
	carrys(0) &lt;= mode_i;

	ints_8: for i in 0 to 7 generate
		adder0to7: CLA_4 port map(A_i(4*(i+1)-1 downto 4*i), B(4*(i+1)-1 downto 4*i), carrys(0), carrys(i+1), saida8(4*(i+1)-1 downto 4*i));
	end generate;

	-- to do: corrigir lógica
	ints_4: for i in 0 to 3 generate
		adder8to11: CLA_4 port map(A_i(4*(2*i+1)-1 downto 8*i), B(4*(i*2+1)-1 downto 8*i), carrys(0), carrys(2*i+1), saida4(4*(i*2+1)-1 downto 8*i));
		adder12to15: CLA_4 port map(A_i(4*(2*i+2)-1 downto 4*(i*2+1)), B(4*(2*i+2)-1 downto 4*(i*2+1)), carrys(2*i+1), carrys(2*i+2), saida4(4*(2*i+2)-1 downto 4*(i*2+1)));
	end generate;

	ints_2: for i in 0 to 1 generate
		adder16to17: CLA_4 port map(A_i(4*(4*i+1)-1 downto 16*i), B(4*(4*i+1)-1 downto 16*i), carrys(0), carrys(4*i+1), saida2(4*(4*i+1)-1 downto 16*i));
		adder18to19: CLA_4 port map(A_i(4*(4*i+2)-1 downto 4*(i*4+1)), B(4*(4*i+2)-1 downto 4*(i*4+1)), carrys(4*i+1), carrys(4*i+2), saida2(4*(4*i+2)-1 downto 4*(i*4+1)));
		adder20to21: CLA_4 port map(A_i(4*(4*i+3)-1 downto 4*(i*4+2)), B(4*(4*i+3)-1 downto 4*(i*4+2)), carrys(4*i+2), carrys(4*i+3), saida2(4*(4*i+3)-1 downto 4*(i*4+2)));
		adder22to23: CLA_4 port map(A_i(4*(4*i+4)-1 downto 4*(i*4+3)), B(4*(4*i+4)-1 downto 4*(i*4+3)), carrys(4*i+3), carrys(4*i+4), saida2(4*(4*i+4)-1 downto 4*(i*4+3)));
	end generate;

	ints_1: for i in 0 to 7 generate
		adder24to30: CLA_4 port map(A_i(4*(i+1)-1 downto 4*i), B(4*(i+1)-1 downto 4*i), carrys(i), carrys(i+1), saida1(4*(i+1)-1 downto 4*i));
	end generate;
	
	process(vecSize_i, saida8, saida4, saida2, saida1, mode_i) is
		begin
			case vecSize_i is
				when "00" =&gt;
					S_o &lt;= saida8;
				when "01" =&gt;
					S_o &lt;= saida4;
				when "10" =&gt;	
					S_o &lt;= saida2;
				when "11" =&gt;
					S_o &lt;= saida1;
				when others =&gt;
					S_o &lt;= (others =&gt; 'Z');
			end case;
			
			--inverte B_i e soma 1 se mode_i = 1, se não B_i = B_i
			if mode_i = '0' then
				B &lt;= B_i;
			elsif mode_i = '1' then
				B &lt;= not B_i;
			end if;
	end process;
end Behavioral;

LIBRARY ieee;
USE ieee.std_logic_1164.all;

entity CLA_4 is
	port(
		X : in std_logic_vector(3 downto 0);
		Y : in std_logic_vector(3 downto 0);
		ci : in std_logic;
		co : out std_logic;
		z : out std_logic_vector(3 downto 0)
	);
end CLA_4;

-- nessa arquitetura, os sinais 'p' e 'g' são gerados em paralelo. Isso acelera ao máximo o processo de soma
architecture Behavioral of CLA_4 is
	signal p     : std_logic_vector(3 downto 0);
	signal g     : std_logic_vector(3 downto 0);
	signal carrys: std_logic_vector(4 downto 0);
begin
		-- Gerar os sinais 'p' e 'g' em paralelo
		process(X, Y)
			variable p_temp : std_logic_vector(3 downto 0);
			variable g_temp : std_logic_vector(3 downto 0);
		begin
			for i in 0 to 3 loop
				p_temp(i) := X(i) xor Y(i);
				g_temp(i) := X(i) and Y(i);
			end loop;
			p &lt;= p_temp;
			g &lt;= g_temp;
		end process;
	
		-- Calcular os valores dos carrys em paralelo
		carrys(0) &lt;= ci;
		carrys(1) &lt;= g(0) or (p(0) and carrys(0));
		carrys(2) &lt;= g(1) or (p(1) and carrys(1));
		carrys(3) &lt;= g(2) or (p(2) and carrys(2));
		carrys(4) &lt;= g(3) or (p(3) and carrys(3));
	
		-- Atribuir os valores dos sinais de saída
		co &lt;= carrys(4);
		z &lt;= X xor Y xor carrys(3 downto 0);
end Behavioral;</vhdl>
</project>
